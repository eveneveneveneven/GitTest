#include"GPSData.h"







void CloseUDPSocket(SOCKET ReceivingSocket) {
	printf("Server: Finished receiving. Closing the listening socket...\n");
	if (closesocket(ReceivingSocket) != 0)
		printf("Server: closesocket() failed! Error code: %ld\n", WSAGetLastError());
	else
		printf("Server: closesocket() is OK\n");

	// When application is finished call WSACleanup.
	printf("Server: Cleaning up...\n");
	if (WSACleanup() != 0)
		printf("Server: WSACleanup() failed! Error code: %ld\n", WSAGetLastError());
	else
		printf("Server: WSACleanup() is OK\n");
	system("pause"); 
	//return -1;
}
SOCKET UDPInit(SOCKET ReceivingSocket) {

	WSADATA            wsaData;
	SOCKADDR_IN        ReceiverAddr;
	int                Port = 31036;
	char			ReceiveBuf[500];
	string			ReceiveString;
	int                BufLength = 500;
	SOCKADDR_IN        SenderAddr;
	int                SenderAddrSize = sizeof(SenderAddr);
	int                ByteReceived = 5;

	// Initialize Winsock version 2.2
	if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0)
	{
		printf("Server: WSAStartup failed with error %ld\n", WSAGetLastError());
		system("pause"); //return -1;
	}
	else
		printf("Server: The Winsock DLL status is %s.\n", wsaData.szSystemStatus);

	// Create a new socket to receive datagrams on.
	ReceivingSocket = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);

	if (ReceivingSocket == INVALID_SOCKET)
	{
		printf("Server: Error at socket(): %ld\n", WSAGetLastError());
		// Clean up
		WSACleanup();
		system("pause");// return -1;
	}
	else
		printf("Server: socket OK!\n");


	// IPv4
	ReceiverAddr.sin_family = AF_INET;
	// Port no.
	ReceiverAddr.sin_port = htons(Port);
	// From all interfaces (0.0.0.0)
	ReceiverAddr.sin_addr.s_addr = htonl(INADDR_ANY);

	if (bind(ReceivingSocket, (SOCKADDR *)&ReceiverAddr, sizeof(ReceiverAddr)) == SOCKET_ERROR)
	{
		printf("Server: bind() failed! Error: %ld.\n", WSAGetLastError());
		// Close the socket
		closesocket(ReceivingSocket);
		// Do the clean up
		WSACleanup();
		// and exit with error
		system("pause");
		//return -1;
	}
	else
		printf("Server: bind successful!\n");
	struct timeval timeout;
	timeout.tv_sec = 1;
	timeout.tv_usec = 0;
	setsockopt(ReceivingSocket, SOL_SOCKET, SO_RCVTIMEO, (char*)&timeout, sizeof(timeout));
	setsockopt(ReceivingSocket, SOL_SOCKET, SO_SNDTIMEO, (char*)&timeout, sizeof(timeout));
	// Info on receiver side...
	getsockname(ReceivingSocket, (SOCKADDR *)&ReceiverAddr, (int *)sizeof(ReceiverAddr));

	printf("Server: Receiving IP used: %s\n", inet_ntoa(ReceiverAddr.sin_addr));
	printf("Server: Receiving port used: %d\n", htons(ReceiverAddr.sin_port));

	printf("Server: Ready to receive...\n");
	return ReceivingSocket;
}
void ReceiveData(SOCKET ReceivingSocket, DataAvailable & gpsData) {
	WSADATA            wsaData;
	SOCKADDR_IN        ReceiverAddr;
	int                Port = 31036;
	char			ReceiveBuf[500];
	string			ReceiveString;
	int                BufLength = 500;
	SOCKADDR_IN        SenderAddr;
	int                SenderAddrSize = sizeof(SenderAddr);
	int                ByteReceived = 5;

	ByteReceived = recvfrom(ReceivingSocket, ReceiveBuf, BufLength, 0,
		(SOCKADDR *)&SenderAddr, &SenderAddrSize);
	if (ByteReceived > 0)
	{
		ReceiveString = ReceiveBuf;
		printf("\nReceived new info, size: %d\n", ByteReceived);
		//cout << ReceiveString << endl;
		ReceiveString = ReceiveString.substr(0, ByteReceived - 1);
		vector<string> elements = splitData(ReceiveString, '$');
		extractData(elements, elements.size(), gpsData);
	}
	else if (ByteReceived <= 0)
		printf("Server: Connection closed with error code: %ld\n", WSAGetLastError());
	else
		printf("Server: recvfrom() failed with error code: %d\n", WSAGetLastError());

	getpeername(ReceivingSocket, (SOCKADDR *)&SenderAddr, &SenderAddrSize);
	//printf("Server: Sending IP used: %s\n", inet_ntoa(SenderAddr.sin_addr));
	//printf("Server: Sending port used: %d\n", htons(SenderAddr.sin_port));
}
vector<string> &split(const string &s, char delim, vector<string> &elems) {
	stringstream ss(s);
	string item;
	while (getline(ss, item, delim)) {
		elems.push_back(item);
	}
	return elems;
}
vector<string> splitData(const string s, char delim) {
	vector<string> elems;
	split(s, delim, elems);
	return elems;
}
void extractData(vector<string> elements, int size, DataAvailable & gpsData) {
	//std::cout << size << std::endl;
	string DataType;
	for (int i = 1; i <size; i++) {
		DataType = elements[i].substr(0, 5);
		if (DataType == "GPVTG") {
			elements[i] = "GPVTG,054.7,T,034.4,M,005.5,N,010.2,K*48";
			interpretVTG(elements[i], gpsData);
		}
		if (DataType == "GPHDT") {
			interpretHDT(elements[i], gpsData);
		}
		if (DataType == "GPROT") {
			interpretROT(elements[i], gpsData);
		}
		if (DataType == "GPGGA") {
			interpretGGA(elements[i], gpsData);
		}
		if (DataType == "GPZDA") {
			//interpretZDA(elements[i])
		}
	}
	printData(gpsData);
}
void interpretHDT(string HDTString, DataAvailable & gpsData) {
	vector<string> AllData = splitData(HDTString, ',');
	gpsData.Heading = ::atof(AllData[1].c_str());
}
void interpretROT(string ROTString, DataAvailable & gpsData) {
	vector<string> AllData = splitData(ROTString, ',');
	gpsData.RateOfTurn = ::atof(AllData[1].c_str());
}
void interpretVTG(string VTGString, DataAvailable & gpsData) {
	vector<string> AllData = splitData(VTGString, ',');
	gpsData.TrueTrack = ::atof(AllData[1].c_str());
	gpsData.MagneticTrack = ::atof(AllData[3].c_str());
	gpsData.GroundSpeedKmh = ::atof(AllData[5].c_str());
}
void interpretGGA(string GGAString, DataAvailable & gpsData) {
	vector<string> AllData = splitData(GGAString, ',');
	gpsData.Time = ::atof(AllData[1].c_str());
	gpsData.Latitude = ::atof(AllData[2].c_str());
	gpsData.Longitude = ::atof(AllData[4].c_str());
	gpsData.FixQuality = ::atof(AllData[6].c_str());
}
void printData(DataAvailable & gpsData) {
	cout << "Latitude: \t" << gpsData.Latitude << endl;
	cout << "Longitude: \t" << gpsData.Longitude << endl;
	cout << "Time: \t\t" << gpsData.Time << endl;
	cout << "Fix Quality: \t"<<gpsData.FixQuality << endl;
	cout << "True track: \t" << gpsData.TrueTrack << endl;
	cout << "Magnetic track: " << gpsData.MagneticTrack << endl;
	cout << "Speed (km/h): \t" << gpsData.GroundSpeedKmh << endl;
	cout << "Heading: \t" << gpsData.Heading << endl;
	cout << "Rate of turn: \t" << gpsData.RateOfTurn << endl;
}